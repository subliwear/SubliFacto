"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/accept-language";
exports.ids = ["vendor-chunks/accept-language"];
exports.modules = {

/***/ "(rsc)/./node_modules/accept-language/Build/Source/AcceptLanguage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/accept-language/Build/Source/AcceptLanguage.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar bcp47 = __webpack_require__(/*! bcp47 */ \"(rsc)/./node_modules/bcp47/lib/index.js\");\nvar AcceptLanguage = /** @class */ (function () {\n    function AcceptLanguage() {\n        this.languageTagsWithValues = {};\n        this.defaultLanguageTag = null;\n    }\n    AcceptLanguage.prototype.languages = function (definedLanguages) {\n        var _this = this;\n        if (definedLanguages.length < 1) {\n            throw new Error('No language tags defined. Provide at least 1 language tag to match.');\n        }\n        this.languageTagsWithValues = {};\n        definedLanguages.forEach(function (languageTagString) {\n            var languageTag = bcp47.parse(languageTagString);\n            if (!languageTag) {\n                throw new TypeError(\"'\".concat(languageTagString, \"' is not bcp47 compliant. More about bcp47 https://tools.ietf.org/html/bcp47.\"));\n            }\n            var language = languageTag.langtag.language.language;\n            if (!language) {\n                throw new TypeError(\"\".concat(languageTagString, \" is not supported.\"));\n            }\n            var langtag = languageTag.langtag;\n            var languageTagWithValues = langtag;\n            languageTagWithValues.value = languageTagString;\n            var lowerCasedLanguageTagWithValues = {\n                language: {\n                    language: langtag.language.language.toLowerCase(),\n                    extlang: langtag.language.extlang.map(function (e) { return e.toLowerCase(); }),\n                },\n                region: langtag.region && langtag.region.toLowerCase(),\n                script: langtag.script && langtag.script.toLowerCase(),\n                variant: langtag.variant.map(function (v) { return v.toLowerCase(); }),\n                privateuse: langtag.privateuse.map(function (p) { return p.toLowerCase(); }),\n                extension: langtag.extension.map(function (e) {\n                    return {\n                        extension: e.extension && e.extension.map(function (e) { return e.toLowerCase(); }),\n                        singleton: e.singleton.toLowerCase(),\n                    };\n                }),\n                value: languageTagString,\n            };\n            if (!_this.languageTagsWithValues[language]) {\n                _this.languageTagsWithValues[language] = [lowerCasedLanguageTagWithValues];\n            }\n            else {\n                _this.languageTagsWithValues[language].push(lowerCasedLanguageTagWithValues);\n            }\n        });\n        this.defaultLanguageTag = definedLanguages[0];\n    };\n    AcceptLanguage.prototype.get = function (languagePriorityList) {\n        return this.parse(languagePriorityList)[0];\n    };\n    AcceptLanguage.prototype.create = function () {\n        return null;\n    };\n    AcceptLanguage.prototype.parse = function (languagePriorityList) {\n        if (!languagePriorityList) {\n            return [this.defaultLanguageTag];\n        }\n        var parsedAndSortedLanguageTags = parseAndSortLanguageTags(languagePriorityList);\n        var result = [];\n        for (var _i = 0, parsedAndSortedLanguageTags_1 = parsedAndSortedLanguageTags; _i < parsedAndSortedLanguageTags_1.length; _i++) {\n            var languageTag = parsedAndSortedLanguageTags_1[_i];\n            var requestedLang = bcp47.parse(languageTag.tag);\n            if (!requestedLang) {\n                continue;\n            }\n            var requestedLangTag = requestedLang.langtag;\n            if (!this.languageTagsWithValues[requestedLangTag.language.language]) {\n                continue;\n            }\n            middle: for (var _a = 0, _b = this.languageTagsWithValues[requestedLangTag.language.language]; _a < _b.length; _a++) {\n                var definedLangTag = _b[_a];\n                var unmatchedRequestedSubTag = 0;\n                for (var _c = 0, _d = ['privateuse', 'extension', 'variant', 'region', 'script']; _c < _d.length; _c++) {\n                    var prop = _d[_c];\n                    var definedLanguagePropertValue = definedLangTag[prop];\n                    if (!definedLanguagePropertValue) {\n                        var requestedLanguagePropertyValue_1 = requestedLangTag[prop];\n                        if (requestedLanguagePropertyValue_1) {\n                            unmatchedRequestedSubTag++;\n                        }\n                        switch (prop) {\n                            case 'privateuse':\n                            case 'variant':\n                                for (var i = 0; i < requestedLanguagePropertyValue_1.length; i++) {\n                                    if (requestedLanguagePropertyValue_1[i]) {\n                                        unmatchedRequestedSubTag++;\n                                    }\n                                }\n                                break;\n                            case 'extension':\n                                for (var i = 0; i < requestedLanguagePropertyValue_1.length; i++) {\n                                    var extension = requestedLanguagePropertyValue_1[i].extension;\n                                    for (var ei = 0; ei < extension.length; ei++) {\n                                        if (!requestedLanguagePropertyValue_1[i].extension[ei]) {\n                                            unmatchedRequestedSubTag++;\n                                        }\n                                    }\n                                }\n                                break;\n                        }\n                        continue;\n                    }\n                    // Filter out wider requested languages first. If someone requests 'zh'\n                    // and my defined language is 'zh-Hant'. I cannot match 'zh-Hant', because\n                    // 'zh' is wider than 'zh-Hant'.\n                    var requestedLanguagePropertyValue = requestedLangTag[prop];\n                    if (!requestedLanguagePropertyValue) {\n                        continue middle;\n                    }\n                    switch (prop) {\n                        case 'privateuse':\n                        case 'variant':\n                            for (var i = 0; i < definedLanguagePropertValue.length; i++) {\n                                if (!requestedLanguagePropertyValue[i] || definedLanguagePropertValue[i] !== requestedLanguagePropertyValue[i].toLowerCase()) {\n                                    continue middle;\n                                }\n                            }\n                            break;\n                        case 'extension':\n                            for (var i = 0; i < definedLanguagePropertValue.length; i++) {\n                                var extension = definedLanguagePropertValue[i].extension;\n                                for (var ei = 0; ei < extension.length; ei++) {\n                                    if (!requestedLanguagePropertyValue[i]) {\n                                        continue middle;\n                                    }\n                                    if (!requestedLanguagePropertyValue[i].extension[ei]) {\n                                        continue middle;\n                                    }\n                                    if (extension[ei] !== requestedLanguagePropertyValue[i].extension[ei].toLowerCase()) {\n                                        continue middle;\n                                    }\n                                }\n                            }\n                            break;\n                        default:\n                            if (definedLanguagePropertValue !== requestedLanguagePropertyValue.toLowerCase()) {\n                                continue middle;\n                            }\n                    }\n                }\n                result.push({\n                    unmatchedRequestedSubTag: unmatchedRequestedSubTag,\n                    quality: languageTag.quality,\n                    languageTag: definedLangTag.value\n                });\n            }\n        }\n        return result.length > 0 ? result.sort(function (a, b) {\n            var quality = b.quality - a.quality;\n            if (quality != 0) {\n                return quality;\n            }\n            return a.unmatchedRequestedSubTag - b.unmatchedRequestedSubTag;\n        }).map(function (l) { return l.languageTag; }) : [this.defaultLanguageTag];\n        function parseAndSortLanguageTags(languagePriorityList) {\n            return languagePriorityList.split(',').map(function (weightedLanguageRange) {\n                var components = weightedLanguageRange.replace(/\\s+/, '').split(';');\n                return {\n                    tag: components[0],\n                    quality: components[1] ? parseFloat(components[1].split('=')[1]) : 1.0\n                };\n            })\n                // Filter non-defined language tags\n                .filter(function (languageTag) {\n                if (!languageTag) {\n                    return false;\n                }\n                if (!languageTag.tag) {\n                    return false;\n                }\n                return languageTag;\n            });\n        }\n    };\n    return AcceptLanguage;\n}());\nfunction create() {\n    var al = new AcceptLanguage();\n    al.create = function () {\n        return new AcceptLanguage();\n    };\n    return al;\n}\nmodule.exports = create();\nmodule.exports[\"default\"] = create();\nexports[\"default\"] = create();\n//# sourceMappingURL=AcceptLanguage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYWNjZXB0LWxhbmd1YWdlL0J1aWxkL1NvdXJjZS9BY2NlcHRMYW5ndWFnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZLG1CQUFPLENBQUMsc0RBQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSx5QkFBeUI7QUFDbEcsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw0REFBNEQseUJBQXlCO0FBQ3JGLGtFQUFrRSx5QkFBeUI7QUFDM0Y7QUFDQTtBQUNBLGlGQUFpRix5QkFBeUI7QUFDMUc7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRkFBc0YsMkNBQTJDO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJHQUEyRyxnQkFBZ0I7QUFDM0g7QUFDQTtBQUNBLGtHQUFrRyxnQkFBZ0I7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsNkNBQTZDO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCw2Q0FBNkM7QUFDN0Y7QUFDQSxxREFBcUQsdUJBQXVCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLHdDQUF3QztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsd0NBQXdDO0FBQ3BGO0FBQ0EsaURBQWlELHVCQUF1QjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxxQkFBcUIsdUJBQXVCO0FBQ3JEO0FBQ0E7QUFDQSxrRkFBa0Y7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXNCO0FBQ3RCLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdG9yZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9hY2NlcHQtbGFuZ3VhZ2UvQnVpbGQvU291cmNlL0FjY2VwdExhbmd1YWdlLmpzP2U0ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmNwNDcgPSByZXF1aXJlKFwiYmNwNDdcIik7XG52YXIgQWNjZXB0TGFuZ3VhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWNjZXB0TGFuZ3VhZ2UoKSB7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2VUYWdzV2l0aFZhbHVlcyA9IHt9O1xuICAgICAgICB0aGlzLmRlZmF1bHRMYW5ndWFnZVRhZyA9IG51bGw7XG4gICAgfVxuICAgIEFjY2VwdExhbmd1YWdlLnByb3RvdHlwZS5sYW5ndWFnZXMgPSBmdW5jdGlvbiAoZGVmaW5lZExhbmd1YWdlcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoZGVmaW5lZExhbmd1YWdlcy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGxhbmd1YWdlIHRhZ3MgZGVmaW5lZC4gUHJvdmlkZSBhdCBsZWFzdCAxIGxhbmd1YWdlIHRhZyB0byBtYXRjaC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhbmd1YWdlVGFnc1dpdGhWYWx1ZXMgPSB7fTtcbiAgICAgICAgZGVmaW5lZExhbmd1YWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChsYW5ndWFnZVRhZ1N0cmluZykge1xuICAgICAgICAgICAgdmFyIGxhbmd1YWdlVGFnID0gYmNwNDcucGFyc2UobGFuZ3VhZ2VUYWdTdHJpbmcpO1xuICAgICAgICAgICAgaWYgKCFsYW5ndWFnZVRhZykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCInXCIuY29uY2F0KGxhbmd1YWdlVGFnU3RyaW5nLCBcIicgaXMgbm90IGJjcDQ3IGNvbXBsaWFudC4gTW9yZSBhYm91dCBiY3A0NyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvYmNwNDcuXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlVGFnLmxhbmd0YWcubGFuZ3VhZ2UubGFuZ3VhZ2U7XG4gICAgICAgICAgICBpZiAoIWxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlwiLmNvbmNhdChsYW5ndWFnZVRhZ1N0cmluZywgXCIgaXMgbm90IHN1cHBvcnRlZC5cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGxhbmd0YWcgPSBsYW5ndWFnZVRhZy5sYW5ndGFnO1xuICAgICAgICAgICAgdmFyIGxhbmd1YWdlVGFnV2l0aFZhbHVlcyA9IGxhbmd0YWc7XG4gICAgICAgICAgICBsYW5ndWFnZVRhZ1dpdGhWYWx1ZXMudmFsdWUgPSBsYW5ndWFnZVRhZ1N0cmluZztcbiAgICAgICAgICAgIHZhciBsb3dlckNhc2VkTGFuZ3VhZ2VUYWdXaXRoVmFsdWVzID0ge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlOiB7XG4gICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBsYW5ndGFnLmxhbmd1YWdlLmxhbmd1YWdlLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIGV4dGxhbmc6IGxhbmd0YWcubGFuZ3VhZ2UuZXh0bGFuZy5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUudG9Mb3dlckNhc2UoKTsgfSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWdpb246IGxhbmd0YWcucmVnaW9uICYmIGxhbmd0YWcucmVnaW9uLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgc2NyaXB0OiBsYW5ndGFnLnNjcmlwdCAmJiBsYW5ndGFnLnNjcmlwdC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICAgIHZhcmlhbnQ6IGxhbmd0YWcudmFyaWFudC5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYudG9Mb3dlckNhc2UoKTsgfSksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZXVzZTogbGFuZ3RhZy5wcml2YXRldXNlLm1hcChmdW5jdGlvbiAocCkgeyByZXR1cm4gcC50b0xvd2VyQ2FzZSgpOyB9KSxcbiAgICAgICAgICAgICAgICBleHRlbnNpb246IGxhbmd0YWcuZXh0ZW5zaW9uLm1hcChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uOiBlLmV4dGVuc2lvbiAmJiBlLmV4dGVuc2lvbi5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUudG9Mb3dlckNhc2UoKTsgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGV0b246IGUuc2luZ2xldG9uLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdmFsdWU6IGxhbmd1YWdlVGFnU3RyaW5nLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICghX3RoaXMubGFuZ3VhZ2VUYWdzV2l0aFZhbHVlc1tsYW5ndWFnZV0pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5sYW5ndWFnZVRhZ3NXaXRoVmFsdWVzW2xhbmd1YWdlXSA9IFtsb3dlckNhc2VkTGFuZ3VhZ2VUYWdXaXRoVmFsdWVzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmxhbmd1YWdlVGFnc1dpdGhWYWx1ZXNbbGFuZ3VhZ2VdLnB1c2gobG93ZXJDYXNlZExhbmd1YWdlVGFnV2l0aFZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRlZmF1bHRMYW5ndWFnZVRhZyA9IGRlZmluZWRMYW5ndWFnZXNbMF07XG4gICAgfTtcbiAgICBBY2NlcHRMYW5ndWFnZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGxhbmd1YWdlUHJpb3JpdHlMaXN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlKGxhbmd1YWdlUHJpb3JpdHlMaXN0KVswXTtcbiAgICB9O1xuICAgIEFjY2VwdExhbmd1YWdlLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQWNjZXB0TGFuZ3VhZ2UucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKGxhbmd1YWdlUHJpb3JpdHlMaXN0KSB7XG4gICAgICAgIGlmICghbGFuZ3VhZ2VQcmlvcml0eUxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBbdGhpcy5kZWZhdWx0TGFuZ3VhZ2VUYWddO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJzZWRBbmRTb3J0ZWRMYW5ndWFnZVRhZ3MgPSBwYXJzZUFuZFNvcnRMYW5ndWFnZVRhZ3MobGFuZ3VhZ2VQcmlvcml0eUxpc3QpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgcGFyc2VkQW5kU29ydGVkTGFuZ3VhZ2VUYWdzXzEgPSBwYXJzZWRBbmRTb3J0ZWRMYW5ndWFnZVRhZ3M7IF9pIDwgcGFyc2VkQW5kU29ydGVkTGFuZ3VhZ2VUYWdzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbGFuZ3VhZ2VUYWcgPSBwYXJzZWRBbmRTb3J0ZWRMYW5ndWFnZVRhZ3NfMVtfaV07XG4gICAgICAgICAgICB2YXIgcmVxdWVzdGVkTGFuZyA9IGJjcDQ3LnBhcnNlKGxhbmd1YWdlVGFnLnRhZyk7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3RlZExhbmcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXF1ZXN0ZWRMYW5nVGFnID0gcmVxdWVzdGVkTGFuZy5sYW5ndGFnO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmxhbmd1YWdlVGFnc1dpdGhWYWx1ZXNbcmVxdWVzdGVkTGFuZ1RhZy5sYW5ndWFnZS5sYW5ndWFnZV0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1pZGRsZTogZm9yICh2YXIgX2EgPSAwLCBfYiA9IHRoaXMubGFuZ3VhZ2VUYWdzV2l0aFZhbHVlc1tyZXF1ZXN0ZWRMYW5nVGFnLmxhbmd1YWdlLmxhbmd1YWdlXTsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmaW5lZExhbmdUYWcgPSBfYltfYV07XG4gICAgICAgICAgICAgICAgdmFyIHVubWF0Y2hlZFJlcXVlc3RlZFN1YlRhZyA9IDA7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAwLCBfZCA9IFsncHJpdmF0ZXVzZScsICdleHRlbnNpb24nLCAndmFyaWFudCcsICdyZWdpb24nLCAnc2NyaXB0J107IF9jIDwgX2QubGVuZ3RoOyBfYysrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wID0gX2RbX2NdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmaW5lZExhbmd1YWdlUHJvcGVydFZhbHVlID0gZGVmaW5lZExhbmdUYWdbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGVmaW5lZExhbmd1YWdlUHJvcGVydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdGVkTGFuZ3VhZ2VQcm9wZXJ0eVZhbHVlXzEgPSByZXF1ZXN0ZWRMYW5nVGFnW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RlZExhbmd1YWdlUHJvcGVydHlWYWx1ZV8xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tYXRjaGVkUmVxdWVzdGVkU3ViVGFnKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwcml2YXRldXNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2YXJpYW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXF1ZXN0ZWRMYW5ndWFnZVByb3BlcnR5VmFsdWVfMS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RlZExhbmd1YWdlUHJvcGVydHlWYWx1ZV8xW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5tYXRjaGVkUmVxdWVzdGVkU3ViVGFnKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXh0ZW5zaW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXF1ZXN0ZWRMYW5ndWFnZVByb3BlcnR5VmFsdWVfMS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4dGVuc2lvbiA9IHJlcXVlc3RlZExhbmd1YWdlUHJvcGVydHlWYWx1ZV8xW2ldLmV4dGVuc2lvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGVpID0gMDsgZWkgPCBleHRlbnNpb24ubGVuZ3RoOyBlaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0ZWRMYW5ndWFnZVByb3BlcnR5VmFsdWVfMVtpXS5leHRlbnNpb25bZWldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVubWF0Y2hlZFJlcXVlc3RlZFN1YlRhZysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbHRlciBvdXQgd2lkZXIgcmVxdWVzdGVkIGxhbmd1YWdlcyBmaXJzdC4gSWYgc29tZW9uZSByZXF1ZXN0cyAnemgnXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBteSBkZWZpbmVkIGxhbmd1YWdlIGlzICd6aC1IYW50Jy4gSSBjYW5ub3QgbWF0Y2ggJ3poLUhhbnQnLCBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgIC8vICd6aCcgaXMgd2lkZXIgdGhhbiAnemgtSGFudCcuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0ZWRMYW5ndWFnZVByb3BlcnR5VmFsdWUgPSByZXF1ZXN0ZWRMYW5nVGFnW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcXVlc3RlZExhbmd1YWdlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJpdmF0ZXVzZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2YXJpYW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZmluZWRMYW5ndWFnZVByb3BlcnRWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcXVlc3RlZExhbmd1YWdlUHJvcGVydHlWYWx1ZVtpXSB8fCBkZWZpbmVkTGFuZ3VhZ2VQcm9wZXJ0VmFsdWVbaV0gIT09IHJlcXVlc3RlZExhbmd1YWdlUHJvcGVydHlWYWx1ZVtpXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdleHRlbnNpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVmaW5lZExhbmd1YWdlUHJvcGVydFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHRlbnNpb24gPSBkZWZpbmVkTGFuZ3VhZ2VQcm9wZXJ0VmFsdWVbaV0uZXh0ZW5zaW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlaSA9IDA7IGVpIDwgZXh0ZW5zaW9uLmxlbmd0aDsgZWkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXF1ZXN0ZWRMYW5ndWFnZVByb3BlcnR5VmFsdWVbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlcXVlc3RlZExhbmd1YWdlUHJvcGVydHlWYWx1ZVtpXS5leHRlbnNpb25bZWldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4dGVuc2lvbltlaV0gIT09IHJlcXVlc3RlZExhbmd1YWdlUHJvcGVydHlWYWx1ZVtpXS5leHRlbnNpb25bZWldLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZpbmVkTGFuZ3VhZ2VQcm9wZXJ0VmFsdWUgIT09IHJlcXVlc3RlZExhbmd1YWdlUHJvcGVydHlWYWx1ZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB1bm1hdGNoZWRSZXF1ZXN0ZWRTdWJUYWc6IHVubWF0Y2hlZFJlcXVlc3RlZFN1YlRhZyxcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogbGFuZ3VhZ2VUYWcucXVhbGl0eSxcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VUYWc6IGRlZmluZWRMYW5nVGFnLnZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPiAwID8gcmVzdWx0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBxdWFsaXR5ID0gYi5xdWFsaXR5IC0gYS5xdWFsaXR5O1xuICAgICAgICAgICAgaWYgKHF1YWxpdHkgIT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBxdWFsaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGEudW5tYXRjaGVkUmVxdWVzdGVkU3ViVGFnIC0gYi51bm1hdGNoZWRSZXF1ZXN0ZWRTdWJUYWc7XG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5sYW5ndWFnZVRhZzsgfSkgOiBbdGhpcy5kZWZhdWx0TGFuZ3VhZ2VUYWddO1xuICAgICAgICBmdW5jdGlvbiBwYXJzZUFuZFNvcnRMYW5ndWFnZVRhZ3MobGFuZ3VhZ2VQcmlvcml0eUxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBsYW5ndWFnZVByaW9yaXR5TGlzdC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAod2VpZ2h0ZWRMYW5ndWFnZVJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudHMgPSB3ZWlnaHRlZExhbmd1YWdlUmFuZ2UucmVwbGFjZSgvXFxzKy8sICcnKS5zcGxpdCgnOycpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHRhZzogY29tcG9uZW50c1swXSxcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogY29tcG9uZW50c1sxXSA/IHBhcnNlRmxvYXQoY29tcG9uZW50c1sxXS5zcGxpdCgnPScpWzFdKSA6IDEuMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC8vIEZpbHRlciBub24tZGVmaW5lZCBsYW5ndWFnZSB0YWdzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAobGFuZ3VhZ2VUYWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWxhbmd1YWdlVGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFsYW5ndWFnZVRhZy50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbGFuZ3VhZ2VUYWc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFjY2VwdExhbmd1YWdlO1xufSgpKTtcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgYWwgPSBuZXcgQWNjZXB0TGFuZ3VhZ2UoKTtcbiAgICBhbC5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWNjZXB0TGFuZ3VhZ2UoKTtcbiAgICB9O1xuICAgIHJldHVybiBhbDtcbn1cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlKCk7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlKCk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGUoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjY2VwdExhbmd1YWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/accept-language/Build/Source/AcceptLanguage.js\n");

/***/ })

};
;